[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "symbolica"
dynamic = ["version"]
description = "High-performance rule engine for AI agents with advanced dependency analysis and parallel execution"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Symbolica Team", email = "team@symbolicaengine.ai"},
]
keywords = [
    "rule-engine",
    "ai",
    "agents",
    "yaml",
    "inference",
    "symbolic",
    "dag",
    "parallel",
    "expression-evaluation",
    "business-rules",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Distributed Computing",
    "Typing :: Typed",
]
requires-python = ">=3.8"
dependencies = [
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0",
    "black>=22.0",
    "isort>=5.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "types-PyYAML>=6.0",
]
langchain = [
    "langchain>=0.1.0",
]
semantic-kernel = [
    "semantic-kernel>=0.3.0",
]
all = [
    "langchain>=0.1.0",
    "semantic-kernel>=0.3.0",
]

[project.urls]
Homepage = "https://github.com/anibjoshi/symbolica"
Documentation = "https://symbolica.readthedocs.io"
Repository = "https://github.com/anibjoshi/symbolica"
Issues = "https://github.com/anibjoshi/symbolica/issues"
Changelog = "https://github.com/anibjoshi/symbolica/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "symbolica/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["symbolica"]
include = [
    "symbolica/**/*.py",
    "symbolica/py.typed",
]
exclude = [
    "symbolica/**/*_test.py",
    "symbolica/**/test_*.py",
    "symbolica/**/__pycache__",
    "symbolica/**/*.pyc",
]

[tool.hatch.build.targets.sdist]
include = [
    "symbolica/",
    "README.md",
    "LICENSE",
    "pyproject.toml",
    "requirements.txt",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | build
  | dist
  | \.egg-info
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"**/tests/**" = ["TID252"]  # Allow relative imports in tests

[tool.pytest.ini_options]
testpaths = ["symbolica", "example_usage"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=symbolica",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["symbolica"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
    "*/conftest.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 